#!/usr/bin/env python

import sys
import os
import SocketServer
import atexit
import argparse

from xdo import Xdo

def switch_to_window(classname):
    windows = xdo.search_windows(winclassname=classname.split(".")[0],
                                 desktop=xdo.get_current_desktop(),
                                 only_visible=True,
                                 require=True)
    if not windows:
        return False
    topmost_window = windows.pop()
    active_window = xdo.get_active_window()
    if topmost_window == active_window and len(windows) > 0:
        topmost_window = windows.pop()
    if topmost_window != active_window:
        xdo.activate_window(topmost_window)
        xdo.focus_window(topmost_window)
    return True

class Handler(SocketServer.StreamRequestHandler):
    def handle(self):
        self.data = self.rfile.readline().strip()
        if self.data:
            if switch_to_window(self.data.split()[0]):
                self.request.sendall("success")
            else:
                self.request.sendall("failed")
            self.finish()
        return

def cleanup():
    if os.path.exists(server_address):
        os.remove(server_address)

def main():
    if os.path.exists(server_address):
        os.remove(server_address)
    svr = SocketServer.UnixStreamServer(server_address, Handler, True)
    try:
        svr.serve_forever()
    except (KeyboardInterrupt, SystemExit):
        os.remove(server_address)
    pass

server_address = '/tmp/xdwim.sock'
atexit.register(cleanup)
xdo = Xdo()
parser = argparse.ArgumentParser()
parser.add_argument('--debug', action='store_true', default=False)
args = parser.parse_args()
main()
